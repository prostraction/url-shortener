// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0--rc2
// source: url/url.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	URL_ToShortLink_FullMethodName = "/api.URL/ToShortLink"
	URL_ToFullLink_FullMethodName  = "/api.URL/ToFullLink"
)

// URLClient is the client API for URL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type URLClient interface {
	ToShortLink(ctx context.Context, in *FullURL, opts ...grpc.CallOption) (*ShortURL, error)
	ToFullLink(ctx context.Context, in *ShortURL, opts ...grpc.CallOption) (*FullURL, error)
}

type uRLClient struct {
	cc grpc.ClientConnInterface
}

func NewURLClient(cc grpc.ClientConnInterface) URLClient {
	return &uRLClient{cc}
}

func (c *uRLClient) ToShortLink(ctx context.Context, in *FullURL, opts ...grpc.CallOption) (*ShortURL, error) {
	out := new(ShortURL)
	err := c.cc.Invoke(ctx, URL_ToShortLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLClient) ToFullLink(ctx context.Context, in *ShortURL, opts ...grpc.CallOption) (*FullURL, error) {
	out := new(FullURL)
	err := c.cc.Invoke(ctx, URL_ToFullLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// URLServer is the server API for URL service.
// All implementations should embed UnimplementedURLServer
// for forward compatibility
type URLServer interface {
	ToShortLink(context.Context, *FullURL) (*ShortURL, error)
	ToFullLink(context.Context, *ShortURL) (*FullURL, error)
}

// UnimplementedURLServer should be embedded to have forward compatible implementations.
type UnimplementedURLServer struct {
}

func (UnimplementedURLServer) ToShortLink(context.Context, *FullURL) (*ShortURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToShortLink not implemented")
}
func (UnimplementedURLServer) ToFullLink(context.Context, *ShortURL) (*FullURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToFullLink not implemented")
}

// UnsafeURLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to URLServer will
// result in compilation errors.
type UnsafeURLServer interface {
	mustEmbedUnimplementedURLServer()
}

func RegisterURLServer(s grpc.ServiceRegistrar, srv URLServer) {
	s.RegisterService(&URL_ServiceDesc, srv)
}

func _URL_ToShortLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FullURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLServer).ToShortLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URL_ToShortLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLServer).ToShortLink(ctx, req.(*FullURL))
	}
	return interceptor(ctx, in, info, handler)
}

func _URL_ToFullLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLServer).ToFullLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URL_ToFullLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLServer).ToFullLink(ctx, req.(*ShortURL))
	}
	return interceptor(ctx, in, info, handler)
}

// URL_ServiceDesc is the grpc.ServiceDesc for URL service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var URL_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.URL",
	HandlerType: (*URLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ToShortLink",
			Handler:    _URL_ToShortLink_Handler,
		},
		{
			MethodName: "ToFullLink",
			Handler:    _URL_ToFullLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "url/url.proto",
}
